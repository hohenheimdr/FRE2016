<!---->
<launch>

<param name="use_sim_time" value="true"/>
<!--start kinect point cloud generation-->
<!-- params for kinect sensor....-->
<!-- kinect2 trafos -->
<!--kinect base-->
<node pkg="tf" type="static_transform_publisher" name="new_tf_for_kinect" args="0.51 -0.05 0.95 1.5707 3.14159 0.82 base_link kinect2_position 50"/>


<arg name="base_name"         default="kinect2"/>
  <arg name="sensor"            default="-1" />
  <arg name="publish_tf"        default="true" />
  <arg name="base_name_tf"      default="$(arg base_name)" />
  <arg name="fps_limit"         default="30.0"/>
  <arg name="calib_path"        default="$(find kinect2_bridge)/data/"/>
  <arg name="use_png"           default="false"/>
  <arg name="jpeg_quality"      default="50"/>
  <arg name="png_level"         default="1"/>
  <arg name="depth_method"      default="cpu"/>
  <arg name="depth_device"      default="-1"/>
  <arg name="reg_method"        default="cpu"/>
  <arg name="reg_devive"        default="-1"/>
  <arg name="max_depth"         default="12.0"/>
  <arg name="min_depth"         default="0.1"/>
  <arg name="queue_size"        default="4"/>
  <arg name="bilateral_filter"  default="false"/>
  <arg name="edge_aware_filter" default="false"/>
  <arg name="worker_threads"    default="6"/>
  <arg name="machine"           default="localhost" />
  <arg name="nodelet_manager"   default="$(arg base_name)" />
  <arg name="start_manager"     default="true" />
  <arg name="use_machine"       default="true" />

  <machine name="localhost" address="localhost" if="$(arg use_machine)"/>

  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager"
        if="$(arg start_manager)" machine="$(arg machine)" output="screen"/>
 <!-- high resolution point cloud (1920 x 1080) -->
  <node pkg="nodelet" type="nodelet" name="$(arg base_name)_points_xyzrgb_highres" machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)" respawn="true">
    <remap from="rgb/camera_info"             to="/$(arg base_name)/rgb/camera_info" />
    <remap from="rgb/image_rect_color"        to="/$(arg base_name)/rgb/image"/>
    <remap from="depth_registered/image_rect" to="/$(arg base_name)/depth_highres/image" />
    <remap from="depth_registered/points"     to="/$(arg base_name)/depth/points" />
    <param name="queue_size" type="int" value="5" />
  </node>

<!---aply a voxel grid to kinect data -->
<node pkg="pcl_test" type="voxel_grid" output="screen" name="voxel_grid">
<param name="cloud_in_1" value="/kinect2/depth/points" />
<param name="input_frame_id" value="/kinect2_position" />
<param name="transform_cloud" value="false"/>
<param name="use_ground_plane_filter" value="true"/>
<param name="push_to_plane" value="false"/>
<param name="cloud_out1" value="/kinect_filtered" />
<param name="base_frame" value="world" />

<param name="use_voxel_filter" value="false" />
<param name="x" value="0.01" />
<param name="y" value="0.01" />
<param name="z" value="0.01" />

<param name="assemble" value="true" />
<param name="frequency" value="10" />

</node>
  
<!--start 3d plant detector-->	
	<node pkg="pointcloud_plantdetector" type="kinect_plant_detector" output="screen" name="kinect_filter" respawn="true">
		<param name="cloud_in" value="/voxel_grid/kinect_test" />
		<param name="frame_id" value="/world" />
		<param name="filtered_cloud" value="/no_plane_cloud" />
		<param name="plants_pub" value="/plants_output" />
		<param name="use_ground_plane_filter" value="false"/>

		<param name="ransac_dist" value="0.05" />
		<param name="radius" value="0.02" />
		<param name="neighbour_nr" value="40" />
		<param name="distance" value="0.05" />
		<param name="minClusterSize" value="10" />

	</node>

</launch>
