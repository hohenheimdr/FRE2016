#include <ros/ros.h>
#include "geometry_msgs/PoseStamped.h"
#include "geometry_msgs/TransformStamped.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include "std_msgs/Float64.h"
#include <ros/subscriber.h>
#include "sensor_msgs/PointCloud2.h"
#include "geometry_msgs/TwistStamped.h"
#include "std_msgs/Bool.h"
#include "nav_msgs/Odometry.h"


#include <pcl_ros/point_cloud.h>
#include <pcl_ros/transforms.h>
#include <pcl_ros/impl/transforms.hpp>
#include <pcl/common/common_headers.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/filters/radius_outlier_removal.h>
#include <pcl/filters/conditional_removal.h>



typedef pcl::PointCloud<pcl::PointXYZI> PCLCloud;


class PCL_CLASS
{
public:
	
	double xmin,xmax,ymin,ymax,xmiddle,ymiddle;
	std::string frame_id,cloud_frame;
	ros::Time t;
	
	
	// public variables
	ros::Publisher cloud_out_pub;
	
	PCL_CLASS()
	{}	
		
	~ PCL_CLASS()
	{
	}
	
	
	void readFrontCloud_l(const sensor_msgs::PointCloud2::ConstPtr& msg)
	{
		cloud_frame=msg->header.frame_id;
		t=msg->header.stamp;
		
		//create a pcl point cloud first...
		 pcl::PointCloud<pcl::PointXYZI>::Ptr input_l (new pcl::PointCloud<pcl::PointXYZI>);
		//check if obstacle was detected
		
		//now there is some processing neccessary...convert to baseframe	
		pcl::fromROSMsg(*msg, *input_l);
		//tf::TransformListener *tf_listener1; 
		//tf_listener1->waitForTransform(msg->header.frame_id,frame_id,msg->header.stamp,ros::Duration(5.0));
		//pcl_ros::transformPointCloud(frame_id,*input,*input,*tf_listener1);
		 input_l=apply_filter(input_l,xmin,xmiddel,ymin,ymiddel);
		publish_data(input_l);
	}	
		void readFrontCloud_r(const sensor_msgs::PointCloud2::ConstPtr& msg)
	{
		cloud_frame=msg->header.frame_id;
		t=msg->header.stamp;
		
		//create a pcl point cloud first...
		 pcl::PointCloud<pcl::PointXYZI>::Ptr input_r (new pcl::PointCloud<pcl::PointXYZI>);
		//check if obstacle was detected
		
		//now there is some processing neccessary...convert to baseframe	
		pcl::fromROSMsg(*msg, *input_r);
		//tf::TransformListener *tf_listener1; 
		//tf_listener1->waitForTransform(msg->header.frame_id,frame_id,msg->header.stamp,ros::Duration(5.0));
		//pcl_ros::transformPointCloud(frame_id,*input,*input,*tf_listener1);
		 input_r=apply_filter(input_r,xmax,xmiddel,ymax,ymiddel);
		publish_data(input_r);
	}
	//-----------------------------------------------------------------------
	void publish_data_l(pcl::PointCloud<pcl::PointXYZI>::Ptr input)
	{
		sensor_msgs::PointCloud2 cloud_l;
		//direcly write back the information to the point cloud msg
		pcl::toROSMsg(*input,cloud_l);
		//set the new header and size tranforms
		cloud_l.header.frame_id=frame_id;
		//set old time stamp to avoid errors
		cloud_l.header.stamp=t;
		cloud_l.width=input->points.size();
		cloud_out_l_pub.publish(cloud_l);
	}	
		void publish_data_r(pcl::PointCloud<pcl::PointXYZI>::Ptr input)
	{
		sensor_msgs::PointCloud2 cloud_r;
		//direcly write back the information to the point cloud msg
		pcl::toROSMsg(*input,cloud_r);
		//set the new header and size tranforms
		cloud_r.header.frame_id=frame_id;
		//set old time stamp to avoid errors
		cloud_r.header.stamp=t;
		cloud_r.width=input->points.size();
		cloud_out_r_pub.publish(cloud_r);
				
	}
	
	//-----------------------------------------------------------------------
	pcl::PointCloud<pcl::PointXYZI>::Ptr apply_filter(pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_l,double xmin,double xmiddle, double ymin, double ymiddle)
	{
		pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_filtered_l (new pcl::PointCloud<pcl::PointXYZI>);
		//transform it to the baseframe 
		
		//check if there are points in the defined range	
			  for (int i=0; i<cloud_l->points.size();i++)
			  {
				  if(cloud_l->points[i].x>xmin && cloud_l->points[i].x<xmiddle)
				  {
					  if(cloud_l->points[i].y>ymin && cloud_l->points[i].y<ymiddle)
						{
							cloud_filtered_l->push_back(cloud_l->points[i]);
								
						}
				  }
			  }
			  cloud_filtered_l->width=cloud_filtered_l->points.size();
			  //cloud_filtered->heigth=1;
		
								
		return cloud_filtered_l;
		
		
	}
	
	pcl::PointCloud<pcl::PointXYZI>::Ptr apply_filter(pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_r,double xmax,double xmiddle, double ymax, double ymiddle)
	{
		pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_filtered_r (new pcl::PointCloud<pcl::PointXYZI>);
		//transform it to the baseframe 
		
		//check if there are points in the defined range	
			  for (int i=0; i<cloud_r->points.size();i++)
			  {
				  if(cloud_r->points[i].x>xmiddle && cloud_r->points[i].x<xmax)
				  {
					  if(cloud_r->points[i].y>ymiddle && cloud_r->points[i].y<ymax)
						{
							cloud_filtered_r->push_back(cloud_r->points[i]);
								
						}
				  }
			  }
			  cloud_filtered_R->width=cloud_filtered_r->points.size();
			  //cloud_filtered->heigth=1;
		
								
		return cloud_filtered_r;
		
		
	}
	
};
//-------------------------------------------------------------------------

int main(int argc, char** argv){

ros::init(argc, argv, "error_laser_cmd");

ros::NodeHandle n("~");

 PCL_CLASS o;
std::string front_str,cloud_out_l,cloud_out_r;

	  n.param<std::string>("cloud_in", front_str, "/tilt_scan_cloud_filtered"); 
	  n.param<std::string>("cloud_out_l", cloud_out_l, "/tilt_scan_cloud_filtered_new_l"); 
	  n.param<std::string>("cloud_out_r", cloud_out_r, "/tilt_scan_cloud_filtered_new_r"); 
	  n.param<std::string>("frame_id",o.frame_id,"odom");
	   n.param<double>("radius", o.radius, 200);
	   n.param<int>("neigbour_nr", o.neigbour_nr, 1);
	   n.param<double>("distance", o.distance, 100);
	   n.param<double>("xmin", o.xmin, 10);
	   n.param<double>("xmiddle", o.xmiddel, 0);
	   n.param<double>("xmax", o.xmax, 10);
	   n.param<double>("ymin", o.ymin, 10);
	   n.param<double>("ymiddle", o.ymiddel, 0);
	   n.param<double>("ymax", o.ymax, 10);
	  
	  	  
	  ros::Subscriber sub_laser_front = n.subscribe(front_str,50, &PCL_CLASS::readFrontCloud_l, &o);
	  ros::Subscriber sub_laser_front = n.subscribe(front_str,50, &PCL_CLASS::readFrontCloud_r, &o);
	 
	
      //create publishers
      o.cloud_out_l_pub=n.advertise<sensor_msgs::PointCloud2>(cloud_out_l.c_str(), 50);
      o.cloud_out_r_pub=n.advertise<sensor_msgs::PointCloud2>(cloud_out_r.c_str(), 50);
      
	
	ros::spin();
  

}
